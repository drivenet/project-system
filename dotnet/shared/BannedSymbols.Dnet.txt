M:AutoFixture.Xunit2.AutoDataAttribute.#ctor();Use Dnet.Testing.BaseAutoData or at least Dnet.Testing.FrameworkAutoData instead
M:AutoFixture.Xunit2.AutoDataAttribute.#ctor(System.Type);Use Dnet.Testing.BaseAutoData or at least Dnet.Testing.FrameworkAutoData instead
M:System.TimeProvider.CreateTimer(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan);Use CreateTimer<TTarget> instead for a reeentrant, non-leaking, error-safe timer
T:System.Web.Routing.HttpMethodConstraint;Use Dnet.Web.Routing.OverridableHttpMethodConstraint instead since it supports X-HTTP-Method-Override
T:System.Web.Mvc.HttpGetAttribute;Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Get) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpPostAttribute;Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Post) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpPutAttribute;Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Put) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpDeleteAttribute;Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Delete) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpHeadAttribute;Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Head) instead, to prevents the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpPatchAttribute;Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Patch) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpOptionsAttribute;Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Options) instead, to prevent the "Multiple controller types match..." problem
M:System.Enum.IsDefined(System.Type,System.Object);Use Dnet.Utils.Enums.IsDefined(...) instead unless a type is not known at compile time
M:System.Enum.GetValues`1();Use Dnet.Utils.Enums.GetValues(...) instead
M:System.Enum.Parse(System.Type,System.String,System.Boolean);Use Dnet.Utils.Enums.Parse(...) instead unless a type is not known at compile time
M:System.Guid.NewGuid();Use Dnet.Utils.EuidGenerator.NewEuid() instead, unless generating IDs for logging/tracing purposes or for static initialization
F:System.Web.HttpCacheability.NoCache;Use System.Web.HttpCacheability.Prohibit() instead
T:System.Web.Mvc.OutputCacheAttribute;Use Dnet.Web.Mvc.CacheOutput instead
M:System.Threading.Tasks.Task.Yield();Use TaskEx.YieldUncaptured() instead for synchronization context-safe code
M:System.IO.StreamWriter.#ctor(System.IO.Stream);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.String);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.String,System.Boolean);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32);Use FormattedStreamWriter instead
M:System.Web.Mvc.AjaxRequestExtensions.IsAjaxRequest(System.Web.HttpRequestBase);Use Dnet.Web.HttpRequestBaseExtensions.IsXhr instead since the original method checks in too many places
M:System.Threading.Tasks.Task.WaitAsync(System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task.WaitAsync(System.TimeSpan);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task.WaitAsync(System.TimeSpan,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task.WaitAsync(System.TimeSpan,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task.WaitAsync(System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task`1.WaitAsync(System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task`1.WaitAsync(System.TimeSpan);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task`1.WaitAsync(System.TimeSpan,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task`1.WaitAsync(System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.TimeProviderTaskExtensions.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.TimeProviderTaskExtensions.WaitAsync`1(System.Threading.Tasks.Task`1,System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
P:System.Web.Configuration.HttpCapabilitiesBase.Crawler;Use HttpContext.GetBotCheckContext() instead
P:System.Web.HttpBrowserCapabilitiesBase.Crawler;Use HttpContext.GetBotCheckContext() instead
P:System.Reflection.Assembly.ExportedTypes;Use SafeGetExportedTypes() instead
M:System.Reflection.Assembly.GetExportedTypes();Use SafeGetExportedTypes() instead
M:System.Net.HttpMethod.#ctor(System.String);Use HttpMethods.Get instead to prevent creating extra instances of HttpMethod
P:System.Web.HttpRequest.HttpMethod;Use HttpRequest.GetTransportMethod() instead since it returns a typed method instead of string
P:System.Web.HttpRequestBase.HttpMethod;Use HttpRequestBase.GetMethod() or HttpRequestBase.GetTransportMethod() instead since they return a typed overriden/raw method instead of string
M:System.Web.Mvc.HttpRequestExtensions.GetHttpMethodOverride(System.Web.HttpRequestBase);Use HttpRequestBase.GetMethod() instead since they return a typed overriden method instead of string
T:Microsoft.IO.RecyclableMemoryStreamManager;Use Dnet.IO.Composition.IRecyclableMemoryStreamProvider instead
M:Microsoft.IO.RecyclableMemoryStreamManager.#ctor();Use Dnet.IO.Composition.IRecyclableMemoryStreamProviderFactory instead
M:Microsoft.IO.RecyclableMemoryStreamManager.#ctor(Microsoft.IO.RecyclableMemoryStreamManager.Options);Use Dnet.IO.Composition.IRecyclableMemoryStreamProviderFactory instead
M:System.IO.MemoryStream.#ctor();Use Dnet.IO.IRecyclableMemoryStreamProvider.Get instead, unless the created stream is long-lived
M:System.IO.MemoryStream.#ctor(System.Int32);Use Dnet.IO.IRecyclableMemoryStreamProvider.Get instead, unless the created stream is long-lived
P:System.DateTime.Now;Use System.TimeProvider.GetLocalNow()/GetLocalDateTime() instead
P:System.DateTime.UtcNow;Use System.TimeProvider.GetUtcNow()/GetUtcDateTime() instead
M:System.Xml.XmlReaderSettings.#ctor; Avoid using XmlReaderSettings constructor directly, use Dnet.Text.XmlSettingsFactory.Create* family of methods

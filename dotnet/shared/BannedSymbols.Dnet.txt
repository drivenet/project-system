M:AutoFixture.Xunit2.AutoDataAttribute.#ctor();Use Dnet.Testing.BaseAutoData or at least Dnet.Testing.FrameworkAutoData instead
M:AutoFixture.Xunit2.AutoDataAttribute.#ctor(System.Type);Use Dnet.Testing.BaseAutoData or at least Dnet.Testing.FrameworkAutoData instead
M:System.TimeProvider.CreateTimer(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan); Use CreateTimer<TTarget> instead for a reeentrant, non-leaking, error-safe timer
M:System.TimeProvider.GetElapsedTime(System.Int64); Use GetElapsedTime(System.Int64, System.Int64) instead to prevent potentially counterintuitive application
T:System.Web.Routing.HttpMethodConstraint; Use Dnet.Web.Routing.OverridableHttpMethodConstraint instead since it supports X-HTTP-Method-Override
T:System.Web.Mvc.HttpGetAttribute; Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Get) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpPostAttribute; Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Post) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpPutAttribute; Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Put) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpDeleteAttribute; Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Delete) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpHeadAttribute; Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Head) instead, to prevents the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpPatchAttribute; Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Patch) instead, to prevent the "Multiple controller types match..." problem
T:System.Web.Mvc.HttpOptionsAttribute; Use System.Web.Mvc.Routing.ConstrainedRouteAttribute(..., HttpVerbs.Options) instead, to prevent the "Multiple controller types match..." problem
M:System.Enum.IsDefined(System.Type,System.Object);Use Dnet.Utils.Enums.IsDefined(...) instead unless a type is not known at compile time
M:System.Enum.GetValues`1();Use Dnet.Utils.Enums.GetValues(...) instead
M:System.Enum.Parse(System.Type,System.String,System.Boolean);Use Dnet.Utils.Enums.Parse(...) instead unless a type is not known at compile time
M:System.Guid.NewGuid();Use Dnet.Utils.EuidGenerator.NewEuid() instead, unless generating IDs for logging/tracing purposes or for static initialization
F:System.Web.HttpCacheability.NoCache;Use System.Web.HttpCacheability.Prohibit() instead
T:System.Web.Mvc.OutputCacheAttribute;Use Dnet.Web.Mvc.CacheOutput instead
P:System.Diagnostics.Stopwatch.Elapsed;Use Dnet.Time.IMonotonicTimeSource or Dnet.Time.OSMonotonicTimeSource instead, unless performance-constrained
P:System.Diagnostics.Stopwatch.ElapsedMilliseconds;Use Dnet.Time.IMonotonicTimeSource or Dnet.Time.OSMonotonicTimeSource instead, unless performance-constrained
P:System.Diagnostics.Stopwatch.ElapsedTicks;Use Dnet.Time.IMonotonicTimeSource or Dnet.Time.OSMonotonicTimeSource instead, unless performance-constrained
M:System.Threading.Tasks.Task.Yield();Use TaskEx.YieldUncaptured() instead for synchronization context-safe code
M:System.IO.StreamWriter.#ctor(System.IO.Stream);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.String);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.String,System.Boolean);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean);Use FormattedStreamWriter instead
M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32);Use FormattedStreamWriter instead
M:System.Web.Mvc.AjaxRequestExtensions.IsAjaxRequest(System.Web.HttpRequestBase);Use Dnet.Web.HttpRequestBaseExtensions.IsXhr instead since the original method checks in too many places
M:System.Threading.Tasks.Task.WaitAsync(System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task.WaitAsync(System.TimeSpan);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task.WaitAsync(System.TimeSpan,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task.WaitAsync(System.TimeSpan,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task.WaitAsync(System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task`1.WaitAsync(System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task`1.WaitAsync(System.TimeSpan);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task`1.WaitAsync(System.TimeSpan,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.Task`1.WaitAsync(System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.TimeProviderTaskExtensions.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
M:System.Threading.Tasks.TimeProviderTaskExtensions.WaitAsync`1(System.Threading.Tasks.Task`1,System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken);Consider using TaskExtensions.WithCancellation for more predictable antecedent task failure handling
